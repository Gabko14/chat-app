name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-backend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.101'
    - name: Restore dependencies
      run: dotnet restore ./chat-app-backend/chat-app-backend.sln
    - name: Build
      run: dotnet build ./chat-app-backend/chat-app-backend.sln --no-restore 
    - name: Test
      run: dotnet test ./chat-app-backend/chat-app-backend.sln --no-build 

  build-frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20.11.0'
    - name: Install dependencies
      run: npm ci
      working-directory: ./chat-app
    - name: Lint
      run: npm run lint
      working-directory: ./chat-app
    - name: Build
      run: npm run build
      working-directory: ./chat-app
    - name: Test
      run: npm test
      working-directory: ./chat-app

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]  # Ensures deployment runs only after successful builds
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Backend Docker image to Amazon ECR
      env:
        ECR_REGISTRY: 905418279116.dkr.ecr.us-east-1.amazonaws.com
        ECR_REPOSITORY: chatapp-backend
        IMAGE_TAG: latest
      run: |
        cd chat-app-backend
        docker build --no-cache -t chatapp-backend .
        docker tag chatapp-backend:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        cd ..
    
    - name: Build, tag, and push Frontend Docker image to Amazon ECR
      env:
        ECR_REGISTRY: 905418279116.dkr.ecr.us-east-1.amazonaws.com
        ECR_REPOSITORY: chatapp-frontend
        IMAGE_TAG: latest
      run: |
        cd chat-app
        docker build --no-cache --build-arg NGINX_CONF=nginx.prod.conf --build-arg CONFIGURATION=production -t chatapp-frontend .
        docker tag chatapp-frontend:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        cd ..

    - name: Redeploy Backend ECS cluster Service
      run: |
        aws ecs update-service --cluster chat-app-cluster --service chat-app-backend-service --force-new-deployment --no-cli-pager

    - name: Redeploy Frontend ECS cluster Service
      run: |
        aws ecs update-service --cluster chat-app-cluster --service chat-app-frontend-service --force-new-deployment --no-cli-pager
        
