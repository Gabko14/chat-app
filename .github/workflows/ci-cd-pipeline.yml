name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-backend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.101'
    - name: Restore dependencies
      run: dotnet restore ./chat-app-backend/chat-app-backend.sln
    - name: Build
      run: dotnet build ./chat-app-backend/chat-app-backend.sln --no-restore 
    - name: Test
      run: dotnet test ./chat-app-backend/chat-app-backend.sln --no-build 

  build-frontend:
    runs-on: ubuntu-latest
    needs: build-backend

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20.11.0'
    - name: Install dependencies
      run: npm ci
      working-directory: ./chat-app
    - name: Build
      run: npm run build
      working-directory: ./chat-app
    - name: Test
      run: npm test
      working-directory: ./chat-app

  deploy:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]  # Ensures deployment runs only after successful builds
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker image to Amazon ECR
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY_URI }}:latest .
        docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest

    - name: Fill in the new image ID in the ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ecs-task-definition.json
        container-name: my-container
        image: ${{ secrets.ECR_REPOSITORY_URI }}:latest

    - name: Deploy Docker image to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        service: my-service
        cluster: my-cluster
        task-definition: ${{ steps.task-def.outputs.task-definition }}

      
